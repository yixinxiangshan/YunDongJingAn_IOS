// Generated by CoffeeScript 1.7.1
(function() {
  var ECAPI;

  this.$A = function() {
    
    return new ECAPI();
  };

  ECAPI = function() {
    alert(typeof _env)
    this.action = {
      pid: _env.parent_id
    };
    return this;
  };

  ECAPI.prototype = {};

  ECAPI.prototype.page = function(add_action) {};

  ECAPI.prototype.widget = function(add_action) {};

  ECAPI.prototype.app = function(add_action) {};

  ECAPI.prototype.location = function(add_action) {};

  ECAPI.prototype.db = function(add_action) {};

  ECAPI.prototype.image = function(add_action) {};

  ECAPI.prototype.fs = function(add_action) {};

  ECAPI.prototype.map = function(add_action) {};

  ECAPI.prototype.phone = function(add_action) {};

  ECAPI.prototype.network = function(add_action) {};

  ECAPI.prototype.share = function(add_action) {};

  ECAPI.prototype.media = function(add_action) {};

  ECAPI.prototype.sms = function(add_action) {};

  ECAPI.prototype.pushService = function(add_action) {};

  ECAPI.prototype.utiliy = function(add_action) {};

  ECAPI.prototype.viewUtiliy = function(add_action) {};

  ECAPI.prototype.onCreate = function(call_with_params) {};

  ECAPI.prototype.onCreated = function(call_with_params) {};

  ECAPI.prototype.onResume = function(call_with_params) {};

  ECAPI.prototype.onItemClick = function(call_with_params) {};

  ECAPI.prototype.makeToast = function(call_with_params) {};

  ECAPI.prototype.data = function(call_with_params) {};

  ECAPI.prototype.refresh = function(call_with_params) {};

  ECAPI.prototype.param = function(call_with_params) {};

  ECAPI.prototype.wait = function(call_with_params) {};

  ECAPI.prototype.resumeWait = function(call_with_params) {};

  ECAPI.prototype.log = function(call_with_params) {};

  ECAPI.prototype.callApi = function(call_with_params) {};

  ECAPI.prototype.location = function(call_with_params) {};

  ECAPI.prototype.title = function(call_with_params) {};

  ECAPI.prototype.change = function(call_with_params) {};

  ECAPI.prototype.confirm = function(call_with_params) {};

  ECAPI.prototype.openPage = function(call_with_params) {};

  ECAPI.prototype.itemClick = function(call_with_params) {};
  ECAPI.prototype.click = function(call_with_params) {};
  ECAPI.prototype.back = function(call_with_params) {};
  ECAPI.prototype.move = function(call_with_params) {};
  ECAPI.prototype.zoom = function(call_with_params) {};
  ECAPI.prototype.addPoint = function(call_with_params) {};
  ECAPI.prototype.submit = function(call_with_params) {};
  ECAPI.prototype.callFun = function(call_with_params) {};
    
  (function() {
    var addParams, deviceCallPromise, makeAPI;
    deviceCallPromise = function(self, action, query) {
      alert(action)
      return new Promise(function(resolve, reject) {
        
        alert(query)
        return callCoreApi(action, query, resolve, JSON.stringify(self.action));
      });
    };
    addParams = function(self, action, query) {
      self.action[action] = query || '_';
      return self;
    };
    makeAPI = function(orig_api) {
      alert(2)
      var add_action_fn, call_with_params_fn, fn_str, key;
      add_action_fn = (function(add_action) {}).toString();
      call_with_params_fn = (function(call_with_params) {}).toString();
      orig_api = orig_api.prototype;
      for (key in orig_api) {
        fn_str = orig_api[key].toString();
        if (fn_str === add_action_fn) {
          orig_api[key] = (function(key) {
            return function(query) {
              return addParams(this, key, query);
            };
          })(key);
        } else if (fn_str === call_with_params_fn) {
          orig_api[key] = (function(key) {
            return function(query) {
              return deviceCallPromise(this, key, query);
            };
          })(key);
        }
      }
      return null;
    };
    return makeAPI(ECAPI);
  })(null);
alert(ECAPI.prototype.log.toString())
}).call(this);

//# sourceMappingURL=api4promise.map

